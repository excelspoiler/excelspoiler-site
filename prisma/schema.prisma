// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  firstName     String?
  lastName      String?
  password      String?
  role          Role      @default(USER)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts    Account[]
  sessions    Session[]
  enrollments Enrollment[]
  payments    Payment[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Course {
  id            String      @id @default(cuid())
  title         String
  description   String
  price         Float
  level         CourseLevel @default(BEGINNER)
  durationHours Int
  imageUrl      String?
  vimeoVideoId  String?     // Vimeo video ID
  content       String?     // JSON string for course content
  published     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  enrollments Enrollment[]
  payments    Payment[]
  lessons     Lesson[]
}

model Lesson {
  id           String  @id @default(cuid())
  title        String
  description  String?
  vimeoVideoId String? // Vimeo video ID for this lesson
  order        Int
  duration     Int? // Duration in minutes
  courseId     String
  course       Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  progress LessonProgress[]
}

model LessonProgress {
  id           String   @id @default(cuid())
  userId       String
  lessonId     String
  completed    Boolean  @default(false)
  watchedTime  Int      @default(0) // Watched time in seconds
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
}

model Enrollment {
  id          String    @id @default(cuid())
  userId      String
  courseId    String
  progress    Float     @default(0) // 0-100 percentage
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
}

model Payment {
  id                     String        @id @default(cuid())
  userId                 String
  courseId               String
  amount                 Float
  currency               String        @default("EUR")
  stripePaymentIntentId  String        @unique
  status                 PaymentStatus @default(PENDING)
  createdAt              DateTime      @default(now())
  updatedAt              DateTime      @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum CourseLevel {
  BEGINNER
  INTERMEDIATE
  ADVANCED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}